import logging

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')


class Turn:
    """Represents a single conversational turn with metadata.

    Attributes:
        user_msg (str): The message sent by the user.
        response (str): The response generated by the bot.
        source_urls (list): List of URLs that serve as sources for the response.
        source_names (list): List of source names corresponding to the URLs.
        source_snippets (list): List of text snippets extracted from the sources.
    """

    def __init__(self, user_msg, response, source_urls=None, source_names=None, source_snippets=None):
        """Initializes a Turn instance.

        Args:
            user_msg (str): The message sent by the user.
            response (str): The response generated by the bot.
            source_urls (list, optional): URLs associated with the response.
            source_names (list, optional): Names of the sources.
            source_snippets (list, optional): Text snippets from the sources.
        """
        self.user_msg = user_msg
        self.response = response
        self.source_urls = source_urls or []
        self.source_names = source_names or []
        self.source_snippets = source_snippets or []

        logging.info("Created Turn: User message - '%s', Response - '%s'", user_msg, response)

    def to_dict(self):
        """Converts the turn into a dictionary for serialization.

        Returns:
            dict: A dictionary representation of the Turn instance.
        """
        turn_dict = {
            "user_msg": self.user_msg,
            "response": self.response,
            "source_urls": self.source_urls,
            "source_names": self.source_names,
            "source_snippets": self.source_snippets,
        }

        logging.debug("Turn converted to dictionary: %s", turn_dict)
        return turn_dict
